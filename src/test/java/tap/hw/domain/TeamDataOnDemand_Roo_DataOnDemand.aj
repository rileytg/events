// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package tap.hw.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import tap.hw.domain.Gender;
import tap.hw.domain.School;
import tap.hw.domain.SchoolDataOnDemand;
import tap.hw.domain.Sport;
import tap.hw.domain.SportDataOnDemand;
import tap.hw.domain.SportLevel;
import tap.hw.domain.SportLevelDataOnDemand;
import tap.hw.domain.Team;
import tap.hw.domain.TeamDataOnDemand;

privileged aspect TeamDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TeamDataOnDemand: @Component;
    
    private Random TeamDataOnDemand.rnd = new SecureRandom();
    
    private List<Team> TeamDataOnDemand.data;
    
    @Autowired
    private SchoolDataOnDemand TeamDataOnDemand.schoolDataOnDemand;
    
    @Autowired
    private SportDataOnDemand TeamDataOnDemand.sportDataOnDemand;
    
    @Autowired
    private SportLevelDataOnDemand TeamDataOnDemand.sportLevelDataOnDemand;
    
    public Team TeamDataOnDemand.getNewTransientTeam(int index) {
        Team obj = new Team();
        setGender(obj, index);
        setSchool(obj, index);
        setSport(obj, index);
        setSportLevel(obj, index);
        return obj;
    }
    
    public void TeamDataOnDemand.setGender(Team obj, int index) {
        Gender gender = Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public void TeamDataOnDemand.setSchool(Team obj, int index) {
        School school = schoolDataOnDemand.getRandomSchool();
        obj.setSchool(school);
    }
    
    public void TeamDataOnDemand.setSport(Team obj, int index) {
        Sport sport = sportDataOnDemand.getRandomSport();
        obj.setSport(sport);
    }
    
    public void TeamDataOnDemand.setSportLevel(Team obj, int index) {
        SportLevel sportLevel = sportLevelDataOnDemand.getRandomSportLevel();
        obj.setSportLevel(sportLevel);
    }
    
    public Team TeamDataOnDemand.getSpecificTeam(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Team obj = data.get(index);
        Long id = obj.getId();
        return Team.findTeam(id);
    }
    
    public Team TeamDataOnDemand.getRandomTeam() {
        init();
        Team obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Team.findTeam(id);
    }
    
    public boolean TeamDataOnDemand.modifyTeam(Team obj) {
        return false;
    }
    
    public void TeamDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Team.findTeamEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Team' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Team>();
        for (int i = 0; i < 10; i++) {
            Team obj = getNewTransientTeam(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
